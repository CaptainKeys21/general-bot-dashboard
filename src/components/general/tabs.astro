---
interface Props {
  items: {
    label: string;
    content?: JSX.Element;
  }[];
}

const { items } = Astro.props;
---

<ul class="tab-panel">
  {items.map((item) => (<li><button id={item.label}>{item.label}</button></li>))}
</ul>
{items.map((item) => (
  <div id={item.label} class="tab-menu">
    {item.content || (<p>Sem conteudo para {item.label}</p>)}
  </div>
))}

<script>
  const tabButtons = document.querySelectorAll('.tab-panel button');
  tabButtons[0].classList.add('active'); //Makes first button active
  const tabMenus = document.querySelectorAll('.tab-menu');
  tabMenus[0].classList.add('active'); //Makes first tab active

  tabButtons.forEach((button) => {
    button.addEventListener('click', handleTabChange);
  });

  function handleTabChange(this: HTMLButtonElement, e: Event) {
    const activeMenu = document.querySelectorAll('.tab-panel .active, .tab-menu.active');
    activeMenu.forEach((element) => element.classList.remove('active'));

    this.classList.add('active');
    const targetMenu = document.querySelector(`.tab-menu#${this.id}`);
    targetMenu && targetMenu.classList.add('active');
    
  }

</script>
<style lang="scss">
  @import '../../styles/variables.scss';

  .tab-panel {
    list-style: none;
    width: 100%;
    display: flex;
    justify-content: center;
    border-bottom: 4px solid $alphaDark;

    li {
      margin: 8px;
    }

    button {
      background: none;
      border: none;
      color: $discordWhite;
      font-size: 1rem;
      padding: 4px;

      &:hover {
        text-decoration: underline;
        cursor: pointer;
      }
      
      &.active {
        border-bottom: 4px solid $alphaDark;
      }
    }
  }

  .tab-menu {
    margin: 8px;
    display: none;

    &.active {
      display: block;
    }
  }

</style>